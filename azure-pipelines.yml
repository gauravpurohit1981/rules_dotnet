jobs:
- job: BuildAndTest  
  strategy:
    matrix:
      linux:
        poolName: 'Azure Pipelines'
        vmImage: 'ubuntu-16.04'       
        systemName: 'linux'
  pool:
    name: $(poolName)
    vmImage: $(vmImage)

  steps:
    - script: |
        echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list
        curl https://bazel.build/bazel-release.pub.gpg | sudo apt-key add -
        sudo apt-get update && sudo apt-get install -y bazel
      displayName: 'Install dependencies'
      condition: and(succeeded(), eq(variables['systemName'], 'linux'))
      
    - script: |
        bazel version
      displayName: 'Show bazel version'

    - script: |
        bazel clean --expunge 

    - script: |
        bazel --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m build -s --local_resources=400,1,1.0 --spawn_strategy=standalone //... 
      displayName: 'Build all'
    - script: |
        bazel --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m run -s --local_resources=400,1,1.0 --spawn_strategy=standalone //tests/examples/example_binary:hello.exe
      displayName: 'Run sample hello'
    - script: |
        bazel --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m run -s --local_resources=400,1,1.0 --spawn_strategy=standalone //tests/examples/example_binary:v2.1.200_hello-core.exe
      displayName: 'Run sample core hello'

    - script: |
        bazel --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m test -s --local_resources=400,1,1.0 --test_summary=detailed --spawn_strategy=standalone --test_output=all //... 
      continueOnError: true
      displayName: 'Run tests'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
        testResultsFiles: 'bazel-testlogs/**/test-junit.xml' 
        testRunTitle: $(systemName)
        buildPlatform: $(systemName)
    - script: |
        pwd
        bazel --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m test -s --local_resources=400,1,1.0 --test_summary=detailed --spawn_strategy=standalone --test_output=all //... 
      workingDirectory: $(Build.SourcesDirectory)/docs/examples/mono
      displayName: 'Run mono standalone test'
 steps:
  - task: PublishPipelineArtifact@1
    inputs:
      path: $(System.DefaultWorkingDirectory)/bin/WebApp
      artifact: WebApp
    # - script: |
    #     git checkout -f
    #   workingDirectory: $(Pipeline.Workspace)/rules_dotnet_3rd_party
    #   displayName: 'Clean 3rd_party repo'
    # - script: |
    #     git pull
    #   workingDirectory: $(Pipeline.Workspace)/rules_dotnet_3rd_party
    #   displayName: 'Pull 3rd_party repo'

    # - script: |
    #     git submodule init
    #     git submodule update --recursive
    #   workingDirectory: $(Pipeline.Workspace)/rules_dotnet_3rd_party
    #   displayName: 'Update 3rd party repo'
    # - script: |
    #     bazel clean --expunge 
    #     bazel --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m build -s --local_resources=400,1,1.0 --spawn_strategy=standalone //... 
    #   workingDirectory: $(Build.SourcesDirectory)/docs/examples/mono
    #   displayName: 'Run 3rd_party build'

    # - script: |
    #     bazel shutdown 
    #   workingDirectory: $(Build.SourcesDirectory)/docs/examples/mono
    #   displayName: 'Bazel shutdown'
